package com.bobabrewery.util;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class StakeContract extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80638da5cb5b11610104578063ca1d209d116100a2578063e6fd48bc11610071578063e6fd48bc14610506578063ed95f07f1461050e578063f2fde38b14610516578063fcfc1b141461053c576101da565b8063ca1d209d14610468578063e2bbb15814610485578063e4c75c27146104a8578063e6f04acc146104d4576101da565b80639e3d87cd116100de5780639e3d87cd146103dd578063a238310614610417578063a85adeab14610443578063aa5f7e261461044b576101da565b80638da5cb5b146103835780638f10369a1461038b57806393f1a40b14610393576101da565b8063441a3e701161017c578063630b5ba11161014b578063630b5ba11461032457806364482f791461032c578063715018a614610357578063785e9e861461035f576101da565b8063441a3e70146102bf57806351eb05a6146102e25780635312ea8e146102ff5780635c76ca2d1461031c576101da565b806317caf6f1116101b857806317caf6f1146102535780631eaaa0451461025b5780633dfcb861146102915780633f90916a146102b7576101da565b8063081e3eda146101df5780630e15561a146101f95780631526fe2714610201575b600080fd5b6101e761067a565b60408051918252519081900360200190f35b6101e7610681565b61021e6004803603602081101561021757600080fd5b5035610687565b604080516001600160a01b03909616865260208601949094528484019290925260608401526080830152519081900360a00190f35b6101e76106cf565b61028f6004803603606081101561027157600080fd5b508035906001600160a01b03602082013516906040013515156106d5565b005b61028f600480360360208110156102a757600080fd5b50356001600160a01b0316610890565b6101e7610959565b61028f600480360360408110156102d557600080fd5b50803590602001356109ae565b61028f600480360360208110156102f857600080fd5b5035610c0e565b61028f6004803603602081101561031557600080fd5b5035610d35565b6101e7610ed6565b61028f610edc565b61028f6004803603606081101561034257600080fd5b50803590602081013590604001351515610eff565b61028f61101f565b6103676110cb565b604080516001600160a01b039092168252519081900360200190f35b6103676110da565b6101e76110e9565b6103bf600480360360408110156103a957600080fd5b50803590602001356001600160a01b03166110ef565b60408051938452602084019290925282820152519081900360600190f35b61028f600480360360808110156103f357600080fd5b506001600160a01b038135811691602081013591604082013591606001351661111b565b6101e76004803603604081101561042d57600080fd5b50803590602001356001600160a01b0316611258565b6101e7611318565b61028f6004803603602081101561046157600080fd5b503561131e565b61028f6004803603602081101561047e57600080fd5b5035611513565b61028f6004803603604081101561049b57600080fd5b50803590602001356115a2565b6101e7600480360360408110156104be57600080fd5b50803590602001356001600160a01b0316611776565b61028f600480360360608110156104ea57600080fd5b508035906001600160a01b036020820135169060400135611931565b6101e7611abf565b610367611ac5565b61028f6004803603602081101561052c57600080fd5b50356001600160a01b0316611ad4565b6105e16004803603604081101561055257600080fd5b81019060208101813564010000000081111561056d57600080fd5b82018360208201111561057f57600080fd5b803590602001918460208302840111640100000000831117156105a157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250611bd7915050565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561062557818101518382015260200161060d565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561066457818101518382015260200161064c565b5050505090500194505050505060405180910390f35b609c545b90565b609a5481565b609c818154811061069457fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909185565b609e5481565b6106dd611d38565b6001600160a01b03166106ee6110da565b6001600160a01b031614610737576040805162461bcd60e51b81526020600482018190526024820152600080516020612729833981519152604482015290519081900360640190fd5b61074082611d3c565b801561074e5761074e610edc565b6000609f54421161076157609f54610763565b425b609e549091506107739085611ddb565b609e556040805160a0810182526001600160a01b0394851681526020810195865290810191825260006060820181815260808301828152609c8054600181018255935292517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c600590930292830180546001600160a01b031916919097161790955594517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539d86015590517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539e85015591517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539f84015550517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e53a090910155565b610898611d38565b6001600160a01b03166108a96110da565b6001600160a01b0316146108f2576040805162461bcd60e51b81526020600482018190526024820152600080516020612729833981519152604482015290519081900360640190fd5b6001600160a01b0381166109375760405162461bcd60e51b815260040180806020018281038252602481526020018061262f6024913960400191505060405180910390fd5b609b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000609f54421161096c5750600061067e565b600060a054421061097f5760a054610981565b425b90506109a86098546109a2609f548403609954611e3c90919063ffffffff16565b90611e95565b91505090565b60026065541415610a06576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002606555609c548210610a50576040805162461bcd60e51b815260206004820152600c60248201526b1a5b9d985b1a590817dc1a5960a21b604482015290519081900360640190fd5b6000609c8381548110610a5f57fe5b60009182526020808320868452609d825260408085203386529092529220600281015460059092029092019250421015610aca5760405162461bcd60e51b81526004018080602001828103825260318152602001806125fe6031913960400191505060405180910390fd5b8054831115610b0a5760405162461bcd60e51b815260040180806020018281038252602a815260200180612793602a913960400191505060405180910390fd5b610b1384610c0e565b6000610b5082600101546109a26a0c097ce7bc90715b34b9f160241b610b4a87600301548760000154611e3c90919063ffffffff16565b90611ef2565b9050610b5c3382611f59565b8154610b689085611e95565b8083556003840154610b8e916a0c097ce7bc90715b34b9f160241b91610b4a9190611e3c565b60018301558254610ba9906001600160a01b03163386612032565b6004830154610bb89085611e95565b60048401558315610bcb57600060028301555b604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a350506001606555505050565b609c548110610c53576040805162461bcd60e51b815260206004820152600c60248201526b1a5b9d985b1a590817dc1a5960a21b604482015290519081900360640190fd5b6000609c8281548110610c6257fe5b90600052602060002090600502019050600060a0544210610c855760a054610c87565b425b905081600201548111610c9b575060028101545b600482015480610cb15750600290910155610d32565b6000610cca846002015484611e9590919063ffffffff16565b90506000610cf7609e54610b4a8760010154610cf160995487611e3c90919063ffffffff16565b90611e3c565b9050610d23610d1884610b4a846a0c097ce7bc90715b34b9f160241b611e3c565b600387015490611ddb565b60038601555050506002909101555b50565b60026065541415610d8d576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002606555609c548110610dd7576040805162461bcd60e51b815260206004820152600c60248201526b1a5b9d985b1a590817dc1a5960a21b604482015290519081900360640190fd5b6000609c8281548110610de657fe5b60009182526020808320858452609d825260408085203386529092529220600281015460059092029092019250421015610e515760405162461bcd60e51b815260040180806020018281038252603b81526020018061269f603b913960400191505060405180910390fd5b80548254610e6c916001600160a01b03909116903390612032565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a380546004830154610eb491611e95565b6004909201919091556000808255600180830182905560029092015560655550565b60985481565b609c5460005b81811015610efb57610ef381610c0e565b600101610ee2565b5050565b610f07611d38565b6001600160a01b0316610f186110da565b6001600160a01b031614610f61576040805162461bcd60e51b81526020600482018190526024820152600080516020612729833981519152604482015290519081900360640190fd5b609c548310610fa6576040805162461bcd60e51b815260206004820152600c60248201526b1a5b9d985b1a590817dc1a5960a21b604482015290519081900360640190fd5b8015610fb457610fb4610edc565b610ff182610feb609c8681548110610fc857fe5b906000526020600020906005020160010154609e54611e9590919063ffffffff16565b90611ddb565b609e8190555081609c848154811061100557fe5b906000526020600020906005020160010181905550505050565b611027611d38565b6001600160a01b03166110386110da565b6001600160a01b031614611081576040805162461bcd60e51b81526020600482018190526024820152600080516020612729833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6097546001600160a01b031681565b6033546001600160a01b031690565b60995481565b609d60209081526000928352604080842090915290825290208054600182015460029092015490919083565b600054610100900460ff16806111345750611134612084565b80611142575060005460ff16155b61117d5760405162461bcd60e51b815260040180806020018281038252602e8152602001806126da602e913960400191505060405180910390fd5b600054610100900460ff161580156111a8576000805460ff1961ff0019909116610100171660011790555b6111b0612095565b609780546001600160a01b0319166001600160a01b03878116919091179091556099859055609f84905560a08490558216611224576040805162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015290519081900360640190fd5b609b80546001600160a01b0319166001600160a01b0384161790558015611251576000805461ff00191690555b5050505050565b609c5460009083106112a0576040805162461bcd60e51b815260206004820152600c60248201526b1a5b9d985b1a590817dc1a5960a21b604482015290519081900360640190fd5b6001600160a01b0382166112ed576040805162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015290519081900360640190fd5b506000828152609d602090815260408083206001600160a01b03851684529091529020545b92915050565b60a05481565b609c548110611363576040805162461bcd60e51b815260206004820152600c60248201526b1a5b9d985b1a590817dc1a5960a21b604482015290519081900360640190fd5b6000609c828154811061137257fe5b6000918252602090912060975460059092020180549092506001600160a01b039081169116146113e9576040805162461bcd60e51b815260206004820152601c60248201527f436f6d706f756e6420746f6b656e206e6f7420737570706f7274656400000000604482015290519081900360640190fd5b6000828152609d602090815260408083203384529091529020805461143f5760405162461bcd60e51b81526004018080602001828103825260238152602001806127e76023913960400191505060405180910390fd5b61144883610c0e565b600061147f82600101546109a26a0c097ce7bc90715b34b9f160241b610b4a87600301548760000154611e3c90919063ffffffff16565b825490915061148e9082611ddb565b80835560038401546114b4916a0c097ce7bc90715b34b9f160241b91610b4a9190611e3c565b600183015560048301546114c89082611ddb565b600484015581546040805183815260208101929092528051869233927f92f0bdf80f3916a4279540865e94ef327cf48639092106cca4bddc9bb1de4a8692918290030190a350505050565b60a05442106115535760405162461bcd60e51b81526004018080602001828103825260228152602001806127716022913960400191505060405180910390fd5b60975461156b906001600160a01b0316333084612146565b61158c61158360995483611ef290919063ffffffff16565b60a05490611ddb565b60a055609a5461159c9082611ddb565b609a5550565b600260655414156115fa576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002606555609c548210611644576040805162461bcd60e51b815260206004820152600c60248201526b1a5b9d985b1a590817dc1a5960a21b604482015290519081900360640190fd5b6000609c838154811061165357fe5b60009182526020808320868452609d825260408085203386529092529220600590910290910191508261168585610c0e565b8154156116d15760006116c383600101546109a26a0c097ce7bc90715b34b9f160241b610b4a88600301548860000154611e3c90919063ffffffff16565b90506116cf3382611f59565b505b82546116e8906001600160a01b0316333087612146565b60048301546116f79082611ddb565b600484015581546117089082611ddb565b808355600384015461172e916a0c097ce7bc90715b34b9f160241b91610b4a9190611e3c565b6001830155604080518281529051869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350506001606555505050565b609c5460009083106117be576040805162461bcd60e51b815260206004820152600c60248201526b1a5b9d985b1a590817dc1a5960a21b604482015290519081900360640190fd5b6001600160a01b03821661180b576040805162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015290519081900360640190fd5b6000609c848154811061181a57fe5b60009182526020808320878452609d825260408085206001600160a01b0389168652909252922060036005909202909201908101546004820154600283015492945090914211801561186b57508015155b156118f557600060a05442106118835760a054611885565b425b905060006118a0866002015483611e9590919063ffffffff16565b905060006118c7609e54610b4a8960010154610cf160995487611e3c90919063ffffffff16565b90506118ef6118e885610b4a846a0c097ce7bc90715b34b9f160241b611e3c565b8690611ddb565b94505050505b61192683600101546109a26a0c097ce7bc90715b34b9f160241b610b4a868860000154611e3c90919063ffffffff16565b979650505050505050565b609b5460408051631400493d60e31b815233600482015290516001600160a01b039092169163a00249e891602480820192602092909190829003018186803b15801561197c57600080fd5b505afa158015611990573d6000803e3d6000fd5b505050506040513d60208110156119a657600080fd5b50516119e35760405162461bcd60e51b815260040180806020018281038252602181526020018061280a6021913960400191505060405180910390fd5b609c548310611a28576040805162461bcd60e51b815260206004820152600c60248201526b1a5b9d985b1a590817dc1a5960a21b604482015290519081900360640190fd5b6000838152609d602090815260408083206001600160a01b038616845290915290206002810154421015611a8d5760405162461bcd60e51b81526004018080602001828103825260288152602001806127496028913960400191505060405180910390fd5b60028101919091556003018054600181018255600091825260209091200180546001600160a01b031916331790555050565b609f5481565b609b546001600160a01b031681565b611adc611d38565b6001600160a01b0316611aed6110da565b6001600160a01b031614611b36576040805162461bcd60e51b81526020600482018190526024820152600080516020612729833981519152604482015290519081900360640190fd5b6001600160a01b038116611b7b5760405162461bcd60e51b81526004018080602001828103825260268152602001806126536026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b609c5460609081908310611c21576040805162461bcd60e51b815260206004820152600c60248201526b1a5b9d985b1a590817dc1a5960a21b604482015290519081900360640190fd5b6060845167ffffffffffffffff81118015611c3b57600080fd5b50604051908082528060200260200182016040528015611c65578160200160208202803683370190505b5090506060855167ffffffffffffffff81118015611c8257600080fd5b50604051908082528060200260200182016040528015611cac578160200160208202803683370190505b50905060005b8651811015611d2c57611cd886888381518110611ccb57fe5b6020026020010151611258565b838281518110611ce457fe5b602002602001018181525050611d0d86888381518110611d0057fe5b6020026020010151611776565b828281518110611d1957fe5b6020908102919091010152600101611cb2565b50909590945092505050565b3390565b609c5460005b81811015611dd6576000609c8281548110611d5957fe5b60009182526020909120600590910201546001600160a01b0390811691508416811415611dcd576040805162461bcd60e51b815260206004820152601c60248201527f5374616b696e6720746f6b656e206973206475706c6963617465642e00000000604482015290519081900360640190fd5b50600101611d42565b505050565b600082820183811015611e35576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082611e4b57506000611312565b82820282848281611e5857fe5b0414611e355760405162461bcd60e51b81526004018080602001828103825260218152602001806127086021913960400191505060405180910390fd5b600082821115611eec576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000808211611f48576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611f5157fe5b049392505050565b609754604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611fa457600080fd5b505afa158015611fb8573d6000803e3d6000fd5b505050506040513d6020811015611fce57600080fd5b505190508082111561200657609754611ff1906001600160a01b03168483612032565b609854611ffe9082611ddb565b609855611dd6565b60975461201d906001600160a01b03168484612032565b60985461202a9083611ddb565b609855505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611dd69084906121a6565b600061208f30612257565b15905090565b600054610100900460ff16806120ae57506120ae612084565b806120bc575060005460ff16155b6120f75760405162461bcd60e51b815260040180806020018281038252602e8152602001806126da602e913960400191505060405180910390fd5b600054610100900460ff16158015612122576000805460ff1961ff0019909116610100171660011790555b61212a61225d565b6121326122fd565b8015610d32576000805461ff001916905550565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526121a09085906121a6565b50505050565b60606121fb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123f69092919063ffffffff16565b805190915015611dd65780806020019051602081101561221a57600080fd5b5051611dd65760405162461bcd60e51b815260040180806020018281038252602a8152602001806127bd602a913960400191505060405180910390fd5b3b151590565b600054610100900460ff16806122765750612276612084565b80612284575060005460ff16155b6122bf5760405162461bcd60e51b815260040180806020018281038252602e8152602001806126da602e913960400191505060405180910390fd5b600054610100900460ff16158015612132576000805460ff1961ff0019909116610100171660011790558015610d32576000805461ff001916905550565b600054610100900460ff16806123165750612316612084565b80612324575060005460ff16155b61235f5760405162461bcd60e51b815260040180806020018281038252602e8152602001806126da602e913960400191505060405180910390fd5b600054610100900460ff1615801561238a576000805460ff1961ff0019909116610100171660011790555b6000612394611d38565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610d32576000805461ff001916905550565b6060612405848460008561240d565b949350505050565b60608247101561244e5760405162461bcd60e51b81526004018080602001828103825260268152602001806126796026913960400191505060405180910390fd5b61245785612257565b6124a8576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106124e75780518252601f1990920191602091820191016124c8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612549576040519150601f19603f3d011682016040523d82523d6000602084013e61254e565b606091505b509150915061192682828660608315612568575081611e35565b8251156125785782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156125c25781810151838201526020016125aa565b50505050905090810190601f1680156125ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4c6173742073616c6520796f75207265676973746572656420666f72206973206e6f742066696e6973686564207965742e73616c6573466163746f7279206164647265737320213d207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c456d657267656e637920776974686472617720626c6f636b656420647572696e672073616c6520616e6420636f6f6c646f776e20706572696f642e496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572757365722e746f6b656e73556e6c6f636b54696d65203c3d20626c6f636b2e74696d657374616d7066756e643a20746f6f206c6174652c20746865206661726d20697320636c6f73656477697468647261773a2063616e2774207769746864726177206d6f7265207468616e206465706f7369745361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645573657220646f6573206e6f74206861766520616e797468696e67207374616b65642e53616c65206e6f742063726561746564207468726f75676820666163746f72792ea26469706673582212204c90889f77717b50d6fe3d1848a107eda72921d4cd33b8ec8ccd731d0efad1d164736f6c634300060c0033";

    public static final String FUNC_ADD = "add";

    public static final String FUNC_COMPOUND = "compound";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_DEPOSITED = "deposited";

    public static final String FUNC_EMERGENCYWITHDRAW = "emergencyWithdraw";

    public static final String FUNC_ENDTIMESTAMP = "endTimestamp";

    public static final String FUNC_ERC20 = "erc20";

    public static final String FUNC_FUND = "fund";

    public static final String FUNC_GETPENDINGANDDEPOSITEDFORUSERS = "getPendingAndDepositedForUsers";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_MASSUPDATEPOOLS = "massUpdatePools";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAIDOUT = "paidOut";

    public static final String FUNC_PENDING = "pending";

    public static final String FUNC_POOLINFO = "poolInfo";

    public static final String FUNC_POOLLENGTH = "poolLength";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_REWARDPERSECOND = "rewardPerSecond";

    public static final String FUNC_SALESFACTORY = "salesFactory";

    public static final String FUNC_SET = "set";

    public static final String FUNC_SETSALESFACTORY = "setSalesFactory";

    public static final String FUNC_SETTOKENSUNLOCKTIME = "setTokensUnlockTime";

    public static final String FUNC_STARTTIMESTAMP = "startTimestamp";

    public static final String FUNC_TOTALALLOCPOINT = "totalAllocPoint";

    public static final String FUNC_TOTALPENDING = "totalPending";

    public static final String FUNC_TOTALREWARDS = "totalRewards";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEPOOL = "updatePool";

    public static final String FUNC_USERINFO = "userInfo";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final Event COMPOUNDEDEARNINGS_EVENT = new Event("CompoundedEarnings",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event DEPOSIT_EVENT = new Event("Deposit",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event EMERGENCYWITHDRAW_EVENT = new Event("EmergencyWithdraw",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event WITHDRAW_EVENT = new Event("Withdraw",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }));
    ;

    @Deprecated
    protected StakeContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected StakeContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected StakeContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected StakeContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<CompoundedEarningsEventResponse> getCompoundedEarningsEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(COMPOUNDEDEARNINGS_EVENT, transactionReceipt);
        ArrayList<CompoundedEarningsEventResponse> responses = new ArrayList<CompoundedEarningsEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CompoundedEarningsEventResponse typedResponse = new CompoundedEarningsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amountAdded = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.totalDeposited = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CompoundedEarningsEventResponse> compoundedEarningsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CompoundedEarningsEventResponse>() {
            @Override
            public CompoundedEarningsEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(COMPOUNDEDEARNINGS_EVENT, log);
                CompoundedEarningsEventResponse typedResponse = new CompoundedEarningsEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amountAdded = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.totalDeposited = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CompoundedEarningsEventResponse> compoundedEarningsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COMPOUNDEDEARNINGS_EVENT));
        return compoundedEarningsEventFlowable(filter);
    }

    public List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositEventResponse>() {
            @Override
            public DepositEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSIT_EVENT, log);
                DepositEventResponse typedResponse = new DepositEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public List<EmergencyWithdrawEventResponse> getEmergencyWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EMERGENCYWITHDRAW_EVENT, transactionReceipt);
        ArrayList<EmergencyWithdrawEventResponse> responses = new ArrayList<EmergencyWithdrawEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            EmergencyWithdrawEventResponse typedResponse = new EmergencyWithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EmergencyWithdrawEventResponse> emergencyWithdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EmergencyWithdrawEventResponse>() {
            @Override
            public EmergencyWithdrawEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(EMERGENCYWITHDRAW_EVENT, log);
                EmergencyWithdrawEventResponse typedResponse = new EmergencyWithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EmergencyWithdrawEventResponse> emergencyWithdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EMERGENCYWITHDRAW_EVENT));
        return emergencyWithdrawEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<WithdrawEventResponse> getWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAW_EVENT, transactionReceipt);
        ArrayList<WithdrawEventResponse> responses = new ArrayList<WithdrawEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawEventResponse typedResponse = new WithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawEventResponse>() {
            @Override
            public WithdrawEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAW_EVENT, log);
                WithdrawEventResponse typedResponse = new WithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAW_EVENT));
        return withdrawEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> add(BigInteger _allocPoint, String _lpToken, Boolean _withUpdate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADD,
                Arrays.<Type>asList(new Uint256(_allocPoint),
                        new Address(160, _lpToken),
                        new org.web3j.abi.datatypes.Bool(_withUpdate)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> compound(BigInteger _pid) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_COMPOUND,
                Arrays.<Type>asList(new Uint256(_pid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(BigInteger _pid, BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSIT,
                Arrays.<Type>asList(new Uint256(_pid),
                        new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> deposited(BigInteger _pid, String _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEPOSITED,
                Arrays.<Type>asList(new Uint256(_pid),
                        new Address(160, _user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> emergencyWithdraw(BigInteger _pid) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EMERGENCYWITHDRAW,
                Arrays.<Type>asList(new Uint256(_pid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> endTimestamp() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ENDTIMESTAMP,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> erc20() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ERC20,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> fund(BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FUND,
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>> getPendingAndDepositedForUsers(List<String> users, BigInteger pid) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPENDINGANDDEPOSITEDFORUSERS,
                Arrays.<Type>asList(new DynamicArray<Address>(
                                Address.class,
                                org.web3j.abi.Utils.typeMap(users, Address.class)),
                        new Uint256(pid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _erc20, BigInteger _rewardPerSecond, BigInteger _startTimestamp, String _salesFactory) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(new Address(160, _erc20),
                        new Uint256(_rewardPerSecond),
                        new Uint256(_startTimestamp),
                        new Address(160, _salesFactory)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> massUpdatePools() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MASSUPDATEPOOLS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> paidOut() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAIDOUT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> pending(BigInteger _pid, String _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PENDING,
                Arrays.<Type>asList(new Uint256(_pid),
                        new Address(160, _user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>> poolInfo(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_POOLINFO,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }));
        return new RemoteFunctionCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> poolLength() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_POOLLENGTH,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> rewardPerSecond() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REWARDPERSECOND,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> salesFactory() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SALESFACTORY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> set(BigInteger _pid, BigInteger _allocPoint, Boolean _withUpdate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SET,
                Arrays.<Type>asList(new Uint256(_pid),
                        new Uint256(_allocPoint),
                        new org.web3j.abi.datatypes.Bool(_withUpdate)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSalesFactory(String _salesFactory) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSALESFACTORY,
                Arrays.<Type>asList(new Address(160, _salesFactory)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTokensUnlockTime(BigInteger _pid, String _user, BigInteger _tokensUnlockTime) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTOKENSUNLOCKTIME,
                Arrays.<Type>asList(new Uint256(_pid),
                        new Address(160, _user),
                        new Uint256(_tokensUnlockTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> startTimestamp() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STARTTIMESTAMP,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalAllocPoint() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALALLOCPOINT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalPending() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALPENDING,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalRewards() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALREWARDS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updatePool(BigInteger _pid) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEPOOL,
                Arrays.<Type>asList(new Uint256(_pid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> userInfo(BigInteger param0, String param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERINFO,
                Arrays.<Type>asList(new Uint256(param0),
                        new Address(160, param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger _pid, BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(new Uint256(_pid),
                        new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static StakeContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new StakeContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static StakeContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new StakeContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static StakeContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new StakeContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static StakeContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new StakeContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<StakeContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(StakeContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<StakeContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(StakeContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<StakeContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(StakeContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<StakeContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(StakeContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class CompoundedEarningsEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger pid;

        public BigInteger amountAdded;

        public BigInteger totalDeposited;
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger pid;

        public BigInteger amount;
    }

    public static class EmergencyWithdrawEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger pid;

        public BigInteger amount;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class WithdrawEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger pid;

        public BigInteger amount;
    }
}
